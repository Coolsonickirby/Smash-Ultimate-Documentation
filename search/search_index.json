{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":""},{"location":"#welcome-to-the-super-smash-bros-ultimate-modding-documentation","title":"Welcome to the Super Smash Bros. Ultimate Modding Documentation","text":"<p>Super Smash Bros. Ultimate Modding information is scattered everywhere on Discord, Gamebanana, and Github. This website aims to have it all collected into one place so that you can easily find information about Ultimate Modding.</p> <p>Right now this will most likely just be a list of file formats and programs you can use with them as well as other reverse engineering stuff as that's the only stuff I know about, but hopefully more people will be able to contribute to other stuff.</p>"},{"location":"File%20Formats/","title":"File Formats","text":""},{"location":"File%20Formats/#file-formats","title":"File Formats","text":""},{"location":"File%20Formats/#adjb","title":"adjb","text":"<p>Renormal mesh adjacency (according to the ssbh_editor github page).</p> <p>You can use the following program to edit adjb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> </ul> <p>You can use the following library to view/modify adjb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#arc","title":"arc","text":"<p>There are two types of arc extensions: the data.arc and layout.arc</p>"},{"location":"File%20Formats/#dataarc","title":"data.arc","text":"<p>The data.arc is the main archive file the game stores all its data in.</p> <p>You can use the following programs to view and extract from the data.arc:</p> <ul> <li>ArcExplorer (Windows/Linux) (Recommended)</li> <li>CrossArc (Windows)</li> </ul> <p>You can use the following library to view/modify the data.arc:</p> <ul> <li>smash-arc (Rust)</li> </ul>"},{"location":"File%20Formats/#layoutarc","title":"layout.arc","text":"<p>The layout.arc is used to signify how the UI should look.</p> <p>You can use the following program to modify the layout.arc:</p> <ul> <li>Switch Toolbox (Windows)</li> </ul>"},{"location":"File%20Formats/#bfotf-bfttf","title":"bfotf / bfttf","text":"<p>Binary Cafe OpenType Font / TrueType Font</p> <p>You can use the following programs to create/convert bfotf/bfttf files:</p> <ul> <li>NintyFont (Windows/Linux) (Recommended)</li> <li>BFTTFutil (Windows)</li> </ul>"},{"location":"File%20Formats/#bin","title":"bin","text":"<p>There are multiple files with the bin extension, so I'll just cover the most common ones</p>"},{"location":"File%20Formats/#motion_listbin","title":"motion_list.bin","text":"<p>Has something to do with fighter frames?</p> <p>You can use the following program to view/modify motion_list.bin:</p> <ul> <li>yamlist (Windows)</li> </ul> <p>You can use the following library to view/modify motion_list.bin:</p> <ul> <li>motion_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#bgm_propertybin","title":"bgm_property.bin","text":"<p>A database of all the bgm hashes the game uses for lookup. Has to be ordered either alphabatically or by the hash40s.</p> <p>You can use the following program to view/modify bgm_property.bin:</p> <ul> <li>smash-bgm-property (Windows)</li> </ul> <p>You can use the following library to view/modify motion_list.bin:</p> <ul> <li>smash-bgm-property (Rust)</li> </ul>"},{"location":"File%20Formats/#bntx","title":"bntx","text":"<p>Binary Texture. Most commonly used for UI textures.</p> <p>You can use the following programs to create/modify bntx files:</p> <ul> <li>Switch Toolbox (Windows)</li> <li>img2bntx (Windows)</li> </ul> <p>You can use the following library to create bntx files:</p> <ul> <li>bntx (Rust)</li> </ul>"},{"location":"File%20Formats/#csb","title":"csb","text":"<p>Only one file has this extension and it's the <code>commonsoundtable.csb</code> file.</p> <p>You can use the following program to modify the csb file:</p> <ul> <li>smash-csb (Manual compilation required)</li> </ul> <p>You can use the following library to modify the csb file:</p> <ul> <li>smash-csb (Rust)</li> </ul>"},{"location":"File%20Formats/#eff","title":"eff","text":"<p>Effect files used for fighter and stage effects.</p> <p>You can use the following program to modify eff files:</p> <ul> <li>Switch Toolbox (Windows)</li> </ul>"},{"location":"File%20Formats/#fnv","title":"fnv","text":"<p>Only one file has this extension and it's the <code>sound_volume_fighter_num_table.fnv</code> file.</p> <p>You can use the following program to modify the fnv file:</p> <ul> <li>smash-fnv (Windows)</li> </ul> <p>You can use the following library to modify the fnv file:</p> <ul> <li>smash-fnv (Windows)</li> </ul>"},{"location":"File%20Formats/#h264","title":"h264","text":"<p>MPEG-4 movies used by final smashes.</p> <p>You can use the following ffmpeg command to convert video files to proper h264 files:</p> <p><code>ffmpeg -i &lt;input file&gt; -r 30000/1001 -vf scale=1280x720:flags=bicubic -b:v 6000k &lt;output name&gt;.h264</code></p>"},{"location":"File%20Formats/#lc","title":"lc","text":"<p>Compiled Lua Files. Used for items and menu stuff.</p> <p>You can use the following program to decompile lc files:</p> <ul> <li>DSLuaDecompiler (Manual compilation required)</li> </ul> <p>You can use the following program to compile lua files to lc:</p> <ul> <li><code>luac -s -o &lt;output&gt;.lc &lt;input&gt;.lua</code> (<code>sudo apt-get install lua5.3</code>)</li> </ul>"},{"location":"File%20Formats/#lvd","title":"lvd","text":"<p>Level Data. Contains multiple information for a stage, including collision, camera ranges, and blast zones.</p> <p>You can use the following programs to modify the lvd files:</p> <ul> <li>yamlvd (Windows)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to modify the lvd files:</p> <ul> <li>lvd-rs (Rust)</li> </ul>"},{"location":"File%20Formats/#msbt","title":"msbt","text":"<p>Michigan Single Business Tax. Contains labels and text the game uses.</p> <p>You can use the following programs to modify msbt Files:</p> <ul> <li>Kuriimu2 (Windows/MacOS/Linux)</li> <li>MSBT Editor Reloaded (Windows)</li> </ul> <p>You can use the following library to modify the msbt files:</p> <ul> <li>msbt-rs (Rust)</li> </ul>"},{"location":"File%20Formats/#nro","title":"nro","text":"<p>Compiled Fighter Code.</p> <p>You can disassemble the code in the nro with:</p> <ul> <li>Ghidra + Ghidra Switch Loader</li> </ul>"},{"location":"File%20Formats/#nuanmb","title":"nuanmb","text":"<p>Namco Animation Data.</p> <p>You can use the following programs to view/modify nuanmb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to view/modify nuanmb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#nufxlb","title":"nufxlb","text":"<p>Namco Effects Library. Used for storing data about the shader programs used for rendering.</p> <p>You can use the following library to view/modify nufxlb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#nuhlpb","title":"nuhlpb","text":"<p>Namco Helper Bone Data. Stores bone constraints for helper bones.</p> <p>You can use the following program to view/modify nuhlpb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> </ul> <p>You can use the following library to view/modify nuhlpb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#numatb","title":"numatb","text":"<p>Namco Material Data. Stores a collection of materials used for model rendering.</p> <p>You can use the following programs to view/modify numatb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to view/modify numatb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#numdlb-nusrcmdlb","title":"numdlb / nusrcmdlb","text":"<p>Namco Model Data. Describes the files associated with a model.</p> <p>You can use the following programs to view/modify numdlb/nusrcmdlb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to view/modify numdlb/nusrcmdlb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#numshb","title":"numshb","text":"<p>Namco Mesh Data. Stores the geometric data used for model rendering.</p> <p>You can use the following programs to view/modify numshb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to view/modify numshb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#numshexb","title":"numshexb","text":"<p>Namco Mesh Extension Data. Mesh bounding and flags. Not sure on specifics but I know it controls shadows?</p> <p>You can use the following programs to view/modify numshexb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to view/modify numshexb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#nus3audio","title":"nus3audio","text":"<p>Audio Container. Used for BGM, SFX, and Voices.</p> <p>You can use the following programs to create/view/modify nus3audio files:</p> <ul> <li>nus3audio-rs (Windows/MacOS/Linux)</li> <li>NUS3Audio Editor (Windows)</li> <li>simple-nus3audio-gui (Windows/Linux)</li> <li>Smash Ultimate Tools - Conversion OR Smash Ultimate Tools - Editing (Multiplatform)</li> </ul> <p>You can use the following library to create/view/modify nus3audio files:</p> <ul> <li>libnus3audio (Rust)</li> </ul>"},{"location":"File%20Formats/#nus3bank","title":"nus3bank","text":"<p>Contains options to the respective nus3audio file. Used for Volume, whether the audio pauses when the game is paused, reverb, etc...</p> <p>You can use the following program to modify nus3bank files:</p> <ul> <li>nus3bank-volume-GUI (Windows)</li> </ul>"},{"location":"File%20Formats/#nus3conf","title":"nus3conf","text":"<p>Unknown.</p>"},{"location":"File%20Formats/#nushdb","title":"nushdb","text":"<p>Namco Shader Data. </p> <p>You can use the following library to view/modify nushdb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#nusktb","title":"nusktb","text":"<p>Namco Skeleton Data. Stores the model's skeleton used for skeletal animations.</p> <p>You can use the following programs to view/modify numshb files:</p> <ul> <li>ssbh_editor (Windows/MacOS)</li> <li>StudioSB (Windows)</li> </ul> <p>You can use the following library to view/modify numshb files:</p> <ul> <li>ssbh_lib (Rust)</li> </ul>"},{"location":"File%20Formats/#nutexb","title":"nutexb","text":"<p>Namco Texture Data. Most commonly used for in-game textures.</p> <p>You can use the following programs to create/modify nutexb files:</p> <ul> <li>Switch Toolbox (Windows)</li> <li>img2nutexb (Windows/Linux)</li> </ul> <p>You can use the following library to create nutexb files:</p> <ul> <li>nutexb (Rust)</li> </ul>"},{"location":"File%20Formats/#prc-stdat-stprm","title":"prc / stdat / stprm","text":"<p>Parameter Files. Used for databases, stage data, and stage parameters.</p> <p>You can use the following programs to view/modify prc/stdat/stprm files:</p> <ul> <li>prickly (Windows/MacOS/Linux)</li> <li>param-xml (Windows)</li> <li>prcEditor (Windows)</li> </ul> <p>You can use the following library to view/modify prc/stdat/stprm files:</p> <ul> <li>prc-rs (Rust)</li> </ul>"},{"location":"File%20Formats/#shpc","title":"shpc","text":"<p>Ambient Diffuse Lighting.</p> <p>You can use the following library to view/modify shpc files:</p> <ul> <li>shpc</li> </ul>"},{"location":"File%20Formats/#shpcanim","title":"shpcanim","text":"<p>Ambient Diffuse Lighting Animation.</p>"},{"location":"File%20Formats/#sli","title":"sli","text":"<p>Only one file has this extension and it's the <code>soundlabelinfo.sli</code> file.</p> <p>You can use the following program to view/modify the <code>soundlabelinfo.sli</code> file:</p> <ul> <li>smash-sli (Windows/Linux)</li> </ul> <p>You can use the following library to view/modify the <code>soundlabelinfo.sli</code> file:</p> <ul> <li>smash-sli (Rust)</li> </ul>"},{"location":"File%20Formats/#spt","title":"spt","text":"<p>Sound Priority Table.</p>"},{"location":"File%20Formats/#sqb","title":"sqb","text":"<p>Sequence Banks.</p> <p>You can use the following program to view/modify sqb files:</p> <ul> <li>sqb_yaml (Windows)</li> </ul> <p>You can use the following library to view/modify sqb files:</p> <ul> <li>sqb-rs (Rust)</li> </ul>"},{"location":"File%20Formats/#svt","title":"svt","text":"<p>Only one file has this extension and it's the <code>sound_volume_table.svt</code> file.</p> <p>You can use the following program to view/modify sqb files:</p> <ul> <li>svt (Windows)</li> </ul> <p>You can use the following library to view/modify sqb files:</p> <ul> <li>smash-svt (Rust)</li> </ul>"},{"location":"File%20Formats/#tonelabel","title":"tonelabel","text":"<p>File containing hashes for related nus3audio.</p> <p>You can use the following program to create a tonelabel:</p> <ul> <li>nus3audio-rs (Windows/MacOS/Linux)</li> </ul> <p>You can use the following library to create a tonelabel:</p> <ul> <li>libnus3audio (Rust)</li> </ul>"},{"location":"File%20Formats/#webm","title":"webm","text":"<p>Video files used for the intro, cutscenes, and technique videos.</p> <p>You can use the following ffmpeg command to convert video files to proper webm files:</p> <p><code>ffmpeg -i &lt;input file&gt; -vf scale=1280:720 -vsync cfr -ar 48000 -r 29.970 -c:v libvpx-vp9 -b:v 2M -c:a libvorbis &lt;output name&gt;.webm</code></p>"},{"location":"File%20Formats/#xmb","title":"xmb","text":"<p>LOD and model parameters.</p> <p>You can use the following program to convert a xmb file:</p> <ul> <li>xmb (Windows)</li> </ul> <p>You can use the following library to modify a xmb file:</p> <ul> <li>xmb_lib (Rust)</li> </ul>"},{"location":"Modding/Audio/","title":"Audio","text":""},{"location":"Modding/Audio/#audio","title":"Audio","text":""},{"location":"Modding/Audio/#programs","title":"Programs","text":""},{"location":"Modding/Audio/#requirements","title":"Requirements","text":"<ul> <li>A nus3audio editor (you can pick any one of these)<ul> <li>nus3audio-rs (Windows/MacOS/Linux)</li> <li>NUS3Audio Editor (Windows)</li> <li>simple-nus3audio-gui (Windows/Linux)</li> <li>Smash Ultimate Tools - Editing (Multiplatform)</li> </ul> </li> <li>.NET Core 6.0 Runtime</li> <li>VGAudio (Windows/MacOS/Linux)</li> </ul>"},{"location":"Modding/Audio/#optional","title":"Optional","text":"<ul> <li>Audacity (Windows/MacOS/Linux)</li> <li>nus3bank-volume-GUI (Windows)</li> </ul>"},{"location":"Modding/Audio/#music-modding","title":"Music Modding","text":""},{"location":"Modding/Audio/#creating-a-lopus-file","title":"Creating a lopus file","text":"<ol> <li>Make sure your music file is a WAV file with a sample rate of 48000hz<ul> <li>If you're not sure/want to make sure 100% it is, then import your wav into Audacity and set the <code>Project Rate</code> at the bottom left to <code>48000</code> then export it to wav </li> </ul> </li> <li>Select two regions in your song and note down the start and end samples if you want your song to loop</li> <li>Now open up a command prompt instance in the folder with VGAudioCli and run the following command (replace the brackets with the respective information)<ul> <li><code>dotnet VGAudioCli.dll -i &lt;input path&gt; -o &lt;output name&gt;.lopus -l &lt;loop start&gt;-&lt;loop end&gt; --bitrate 64000 --CBR --opusheader namco</code> </li> </ul> </li> <li>Afterwards you should have a lopus file.</li> </ol>"},{"location":"Modding/Audio/#creating-a-nus3audio-file","title":"Creating a nus3audio file","text":""},{"location":"Modding/Audio/#using-nus3audio-rs","title":"Using nus3audio-rs","text":"<ol> <li>Open up a command prompt instance in the folder with the nus3audio program and run the following command (replace the brackets with the respective information)<ul> <li><code>nus3audio -n -A &lt;whatever_you_want&gt; &lt;lopus path&gt; -w &lt;output name&gt;.nus3audio</code> </li> </ul> </li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#using-nus3audio-editor","title":"Using NUS3Audio Editor","text":"<ol> <li>Open a pre-existing nus3audio file (either from the data.arc or a pre-existing mod)</li> <li>Click the first entry in there and press <code>Replace</code></li> <li>Select the lopus file</li> <li>Save the file</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#using-simple-nus3audio-gui","title":"Using simple-nus3audio-gui","text":"<ol> <li>Click <code>File -&gt; New</code></li> <li>Click <code>Edit -&gt; Add Sound</code></li> <li>Click the first entry and then <code>Edit -&gt; Sound Properties</code></li> <li>Select <code>LOPUS format</code></li> <li>Enable <code>Loop Audio</code></li> <li>Set <code>Loop from</code> to your start loop sample &amp; <code>Loop to</code> to your loop end sample</li> <li>Hit <code>Ok</code></li> <li>Click <code>Edit -&gt; Replace Single Sound</code> and select your lopus file</li> <li>Click <code>File -&gt; Save nus3audio</code> and save it</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#using-smash-ultimate-tools","title":"Using Smash Ultimate Tools","text":"<ol> <li>Open a pre-existing nus3audio file (either from the data.arc or a pre-existing mod)</li> <li>Click <code>Choose File</code> on the first entry</li> <li>Select the lopus file</li> <li>Save the file</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#voicessfx-modding","title":"Voices/SFX Modding","text":""},{"location":"Modding/Audio/#creating-a-idsp-file","title":"Creating a idsp file","text":"<ol> <li>Make sure your music file is a WAV file with any sample rate<ul> <li>If you're not sure/want to make sure 100% it is, then import your wav into Audacity and set the <code>Project Rate</code> to anything you want (I recommend 44100hz) </li> </ul> </li> <li>Now open up a command prompt instance in the folder with VGAudioCli and run the following command (replace the brackets with the respective information)<ul> <li><code>dotnet VGAudioCli.dll -i &lt;input path&gt; -o &lt;output name&gt;.idsp</code> </li> </ul> </li> <li>Afterwards you should have a idsp file.</li> </ol>"},{"location":"Modding/Audio/#modifying-a-nus3audio-file","title":"Modifying a nus3audio file","text":""},{"location":"Modding/Audio/#using-nus3audio-rs_1","title":"Using nus3audio-rs","text":"<ol> <li>Open up a command prompt instance in the folder with the nus3audio program and run the following command (replace the brackets with the respective information)<ul> <li><code>nus3audio &lt;nus3audio path&gt; -v</code> </li> </ul> </li> <li>Press <code>e</code> and hit enter</li> <li>Type the id of the entry you want to replace and hit enter</li> <li>Press <code>d</code> and hit enter</li> <li>Enter the idsp path you want to replace it with and hit enter</li> <li>Press <code>q</code> and hit enter</li> <li>Repeat 2-6 for each entry you want to edit</li> <li>Press <code>w</code> and hit enter</li> <li>Enter <code>&lt;nus3audio name&gt;.nus3audio</code> and hit enter</li> <li>Press <code>q</code> and hit enter</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#using-nus3audio-editor_1","title":"Using NUS3Audio Editor","text":"<ol> <li>Open the nus3audio file you want to edit</li> <li>Click the entry you want to replace and press <code>Replace</code></li> <li>Select the idsp file you want to replace it with</li> <li>Repeat 2-3 for each entry you want to edit</li> <li>Save the file</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#using-simple-nus3audio-gui_1","title":"Using simple-nus3audio-gui","text":"<ol> <li>Open the nus3audio file you want to edit</li> <li>Select the entry you want to edit</li> <li>Click <code>Edit -&gt; Replace Single Sound</code> or press <code>Ctrl + R</code></li> <li>Select the idsp file you want to replace it with</li> <li>Repeat 2-4 for each entry you want to edit</li> <li>Save the file</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#using-smash-ultimate-tools_1","title":"Using Smash Ultimate Tools","text":"<ol> <li>Open the nus3audio file you want to edit</li> <li>Click <code>Choose File</code> for the entry you want to edit</li> <li>Select the idsp file you want to replace it with</li> <li>Repeat 2-3 for each entry you want to edit</li> <li>Save the file</li> <li>You're now done with the nus3audio. Move on to <code>Loading the nus3audio in-game</code></li> </ol>"},{"location":"Modding/Audio/#loading-the-nus3audio-in-game","title":"Loading the nus3audio in-game","text":"<ol> <li>Make sure you have ARCropolis set up properly and working</li> <li>Create a folder in <code>sd:/ultimate/mods</code> with any folder name (I recommend naming it something related to what the mod does)</li> <li>Inside that folder, replicate the ARC path of the file you want to replace (make sure you replace <code>:</code> with <code>;</code>)</li> <li>Launch the game and make sure the mod is enabled and it should work!</li> </ol> <pre><code>Format: sd:/ultimate/mods/&lt;Mod Folder Name&gt;/&lt;ARC path&gt;\nExamples:\nsd:/ultimate/mods/My Cool Music Mods/stream;/sound/bgm/bgm_crs01_menu.nus3audio\nsd:/ultimate/mods/Super Cool Sonic Voice Mod/sound/bank/fighter_voice/vc_sonic.nus3audio\n</code></pre>"},{"location":"Modding/Textures/","title":"Textures","text":""},{"location":"Modding/Textures/#textures","title":"Textures","text":""},{"location":"Modding/Textures/#programs","title":"Programs","text":""},{"location":"Modding/Textures/#requirements","title":"Requirements","text":"<ul> <li>A photo editor</li> <li>A nutexb creator/editor (you can pick any one of these)<ul> <li>Switch Toolbox (Windows)</li> <li>img2nutexb (Windows/Linux)</li> </ul> </li> </ul>"},{"location":"Modding/Textures/#converting-a-nutexb-to-an-image-switch-toolbox-only","title":"Converting a nutexb to an image (Switch Toolbox Only)","text":"<ol> <li>Click <code>File -&gt; Open</code> and select a nutexb file</li> <li>Right-click on the mini-preview on the left side and press <code>Export</code></li> <li>Select the type of file you want to export it as at the bottom     </li> <li>Press <code>Save</code></li> </ol>"},{"location":"Modding/Textures/#converting-a-image-to-a-nutexb","title":"Converting a image to a nutexb","text":""},{"location":"Modding/Textures/#switch-toolbox","title":"Switch Toolbox","text":"<ol> <li>Open a nutexb file to use as a base</li> <li>Right-click on the mini-preview on the left side and press <code>Replace</code></li> <li>Select your image</li> <li>Press <code>Ok</code></li> <li>Click <code>File -&gt; Save As</code> and save the nutexb</li> <li>You're now done with the nutexb. Move on to <code>Loading the nutexb in-game</code></li> </ol>"},{"location":"Modding/Textures/#img2nutexb","title":"img2nutexb","text":"<ol> <li>Open up a command prompt instance in the folder with the img2nutexb program and run the following command (replace the brackets with the respective information)<ul> <li><code>img2nutexb &lt;image path&gt; &lt;nutexb name&gt;.nutexb</code> </li> </ul> </li> <li>You're now done with the nutexb. Move on to <code>Loading the nutexb in-game</code></li> </ol>"},{"location":"Modding/Textures/#loading-the-nutexb-in-game","title":"Loading the nutexb in-game","text":"<ol> <li>Make sure you have ARCropolis set up properly and working</li> <li>Create a folder in <code>sd:/ultimate/mods</code> with any folder name (I recommend naming it something related to what the mod does)</li> <li>Inside that folder, replicate the ARC path of the file you want to replace (make sure you replace <code>:</code> with <code>;</code>)</li> <li>Launch the game and make sure the mod is enabled and it should work!</li> </ol> <pre><code>Format: sd:/ultimate/mods/&lt;Mod Folder Name&gt;/&lt;ARC path&gt;\nExamples:\nsd:/ultimate/mods/Ice Mario/fighter/mario/model/body/c00/def_mario_001_col.nutexb\nsd:/ultimate/mods/Void Sonic/fighter/sonic/model/body/c00/def_sonic_001_col.nutexb\nsd:/ultimate/mods/Destroyed Battlefield/stage/battlefield/normal/model/ring_nocastshadow_set/battlefield_ring_stoneline01_col.nutexb\n</code></pre>"},{"location":"Prerequisites/Dumping%20the%20data.arc/","title":"Dumping the data.arc","text":""},{"location":"Prerequisites/Dumping%20the%20data.arc/#dumping-the-dataarc","title":"Dumping the data.arc","text":""},{"location":"Prerequisites/Dumping%20the%20data.arc/#requirements","title":"Requirements","text":"<ul> <li>One of the following:<ul> <li>A Hacked Switch<ul> <li>nxdumptool</li> </ul> </li> <li>Ryujinx (Windows/Linux)</li> <li>Yuzu (Windows/Linux)</li> </ul> </li> </ul>"},{"location":"Prerequisites/Dumping%20the%20data.arc/#dumping-with-a-hacked-switch","title":"Dumping with a Hacked Switch","text":"<ol> <li>Open up the Homebrew Launcher and launch nxdumptool<ul> <li>If you're using a gamecard, then select the <code>Dump Gamecard</code> option</li> <li>If you downloaded the game digitally, then select <code>Dump installed SD card / eMMC content</code> and select <code>Super Smash Bros. Ultimate</code></li> </ul> </li> <li>Select the <code>RomFS options</code></li> <li>Set <code>Use update/DLC</code> to the latest update version (currently <code>v1769472</code>)</li> <li>Press <code>RomFS section data dump</code> and wait for the game to dump</li> <li>Shut down your switch and insert your SD Card into your computer</li> <li>Navigate to <code>sd:/switch/nxdumptool/RomFS</code></li> <li> <ul> <li>If your SD Card is FAT32, delete the <code>.nrr</code> folder in <code>Super Smash Bros. Ultimate &lt;Update Number&gt; (01006A800016E800) (UPD)</code> then go back to the <code>RomFS</code> folder and open up command prompt in that folder and run the following command (replace &lt;Update Number&gt; with the update number and &lt;output dir&gt; with where you want to save the data.arc locally) <code>copy /b \"Super Smash Bros. Ultimate &lt;Update Number&gt; (01006A800016E800) (UPD)\\*\" \"&lt;output dir&gt;\\data.arc\"</code> </li> <li>If your SD Card is exFAT, then just copy the data.arc in <code>Super Smash Bros. Ultimate &lt;Update Number&gt; (01006A800016E800) (UPD)</code> somewhere to your PC</li> </ul> </li> <li>Remove the dump on your sd card</li> <li>You're done</li> </ol>"},{"location":"Prerequisites/Dumping%20the%20data.arc/#dumping-with-ryujinx","title":"Dumping with Ryujinx","text":"<ol> <li>Right-click on <code>Super Smash Bros. Ultimate</code> game and select <code>Manage Title Updates</code></li> <li>Make sure the latest update is selected and click <code>Ok</code></li> <li>Right-click on <code>Super Smash Bros. Ultimate</code> and click <code>Extract Data -&gt; RomFS</code></li> <li>Wait for Ryujinx to finish dumping <code>Super Smash Bros. Ultimate</code></li> <li>You're done</li> </ol>"},{"location":"Prerequisites/Dumping%20the%20data.arc/#dumping-with-yuzu","title":"Dumping with Yuzu","text":"<ol> <li>Right-click on <code>Super Smash Bros. Ultimate</code> game and select <code>Properties</code></li> <li>Make sure the latest update is checked and click <code>OK</code></li> <li>Right-click on <code>Super Smash Bros. Ultimate</code> and click <code>Dump RomFS -&gt; Dump RomFS</code></li> <li>Wait for Yuzu to finish dumping <code>Super Smash Bros. Ultimate</code></li> <li>You're done</li> </ol>"},{"location":"Prerequisites/Modding%20Setup/","title":"Modding Setup","text":""},{"location":"Prerequisites/Modding%20Setup/#modding-setup","title":"Modding Setup","text":"<p>To run our mods and custom code, we either need to modify the console to run a custom firmware or use Ryujinx. For the console, we'll be using Atmosphere for this, since it's the most stable custom firmware and the only one being actively worked on.</p> <p>Covering how to mod your switch from scratch would be a undertaking that this site isn't suited for, so follow this guide here to setup Atmosphere on your switch.</p> <p>This guide will be a minimal guide to getting the barebones of Super Smash Bros. Ultimate Modding set up. If you want a more comprehensive guide for just using mods, you can follow this guide for console modding or follow this guide for Ryujinx modding.</p>"},{"location":"Prerequisites/Modding%20Setup/#disclaimer","title":"Disclaimer","text":"<ul> <li>If a folder doesn't exist, then create it</li> <li>If it asks you to overwrite, then overwrite</li> <li><code>sd:/</code> means the root of your SD Card (like the <code>C:/</code> drive or <code>D:/</code> drive)</li> </ul>"},{"location":"Prerequisites/Modding%20Setup/#requirements","title":"Requirements","text":"<ul> <li>Skyline (Switch/Ryujinx)</li> <li>ARCropolis (Switch/Ryujinx)</li> <li>sys-ftpd-light (Switch)</li> <li>One of the FTP clients (Console Only)<ul> <li>FileZilla (Switch) (Windows/MacOS/Linux)</li> </ul> </li> </ul>"},{"location":"Prerequisites/Modding%20Setup/#console-setup","title":"Console Setup","text":""},{"location":"Prerequisites/Modding%20Setup/#setting-up-the-sd-card","title":"Setting up the SD Card","text":"<ol> <li>Copy the <code>exefs</code> folder in the Skyline download to <code>sd:/atmosphere/contents/01006A800016E000/</code></li> <li>Copy the <code>atmosphere</code> &amp; <code>ultimate</code> folders in the ARCropolis download to <code>sd:/</code></li> <li>Copy the <code>atmosphere</code> &amp; <code>config</code> folders in the sys-ftpd-light download to <code>sd:/</code></li> <li>Boot into Atmosphere and open up Super Smash Bros. Ultimate.</li> <li>Check the update title at the top left of the title screen. If it says <code>ARCropolis Ver. X.X.X</code>, then you're done!    </li> </ol>"},{"location":"Prerequisites/Modding%20Setup/#using-ftp-to-access-and-modify-your-sd-card-over-network","title":"Using FTP to access and modify your SD Card over Network","text":"<ol> <li>Install FileZilla (following the installer on-screen instructions (make sure to not install the ads in the installer!))</li> <li>Open up FileZilla</li> <li>In the following fields, enter the following information:<ul> <li><code>Host</code> -&gt; your switch's IP address</li> <li><code>Port</code> -&gt; 5000</li> </ul> </li> <li>Click <code>Quickconnect</code> and then click <code>OK</code> on the pop-up</li> <li>You should now be successfully connected to your switch! Now you can transfer files over the network without having to take out the microSD card.    </li> </ol>"},{"location":"Prerequisites/Modding%20Setup/#ryujinx-setup","title":"Ryujinx Setup","text":"<ol> <li>Right-click on Super Smash Bros. Ultimate in Ryujinx and click <code>Open Mods Directory</code></li> <li>Copy the <code>exefs</code> folder in the Skyline download to the directory that was opened by Ryujinx</li> <li>Navigate to <code>atmosphere/contents/01006A800016E000/</code> in the ARCropolis zip and copy the <code>romfs</code> folder to the directory that was opened by Ryujinx</li> <li>Run Super Smash Bros. Ultimate</li> <li>Check the update title at the top left of the title screen. If it says <code>ARCropolis Ver. X.X.X</code>, then you're done!    </li> </ol>"},{"location":"Reverse%20Engineering/GDB/","title":"GDB Setup","text":""},{"location":"Reverse%20Engineering/GDB/#gdb-setup","title":"GDB Setup","text":""},{"location":"Reverse%20Engineering/GDB/#disclaimer","title":"Disclaimer","text":"<p>GDB will only work for the switch console itself! That means you cannot use an emulator (Ryujinx or Yuzu) as a subsititue!</p>"},{"location":"Reverse%20Engineering/GDB/#setup","title":"Setup","text":""},{"location":"Reverse%20Engineering/GDB/#requirements","title":"Requirements","text":"<ul> <li>Debian WSL (Windows)</li> <li>Custom .gdbinit</li> </ul>"},{"location":"Reverse%20Engineering/GDB/#setting-up-on-the-switch-side","title":"Setting up on the Switch side","text":"<ol> <li>Make sure you have the latest Atmosphere set up and running!</li> <li>Edit <code>sd:/atmosphere/config/system_settings.ini</code> (or create it if it's not there) and paste the following in (reboot the switch after you save the file):</li> </ol> <pre><code>[atmosphere]\nenable_htc = u8!0x0\nenable_standalone_gdbstub = u8!0x1\n</code></pre>"},{"location":"Reverse%20Engineering/GDB/#setting-up-wsl-windows-only","title":"Setting up WSL (Windows Only)","text":"<ol> <li>Download <code>Debian</code> from the Microsoft Store</li> <li>Once it's done, run the <code>Debian</code> application</li> <li>If you run into <code>The Windows Subsystem for Linux optional component is not enabled</code>, then search for <code>Windows Features</code>, then scroll down and enable <code>Windows Subsystem for Linux</code></li> <li>Set a password and confirm</li> </ol>"},{"location":"Reverse%20Engineering/GDB/#setting-up-gdb","title":"Setting up GDB","text":"<ol> <li>Run <code>sudo apt-get -y update &amp;&amp; sudo apt-get -y install gdb-multiarch &amp;&amp; sudo apt-get -y install wget</code> (this will update your repos, install gdb-multiarch, and install wget)</li> <li>Run <code>wget https://raw.githubusercontent.com/Coolsonickirby/smash-ultimate-research-setup/main/gdbinit/.gdbinit -O ~/.gdbinit &amp;&amp; wget https://raw.githubusercontent.com/Coolsonickirby/smash-ultimate-research-setup/main/gdbinit/attach.py -O ~/attach.py &amp;&amp; wget https://raw.githubusercontent.com/Coolsonickirby/smash-ultimate-research-setup/main/gdbinit/.gdbinit.switch -O ~/.gdbinit.switch &amp;&amp; wget https://raw.githubusercontent.com/Coolsonickirby/smash-ultimate-research-setup/main/gdbinit/print_addr_setup.py -O ~/print_addr_setup.py</code> (this will download and set up the custom .gdbinit, .gdbinit.switch, attach.py, and print_addr_setup.py files for convenience)</li> <li>Run <code>nano ~/.gdbinit.switch</code> and scroll down until you get to the <code>target extended-remote</code> line</li> <li>Edit the IP in the file to be your switch's IP (you can find the switch's IP by going to <code>System Settings -&gt; Internet -&gt; IP Address</code>)</li> <li>Hit <code>Ctrl + X -&gt; Y -&gt; Enter</code></li> <li>You're done, GDB is now set up with auto-attach + a handful of useful functions!</li> </ol>"},{"location":"Reverse%20Engineering/GDB/#using-gdb","title":"Using GDB","text":"<ol> <li>Open up <code>Debian</code> if you're on Windows</li> <li>Run <code>gdb-multiarch</code></li> <li>Run <code>Super Smash Bros. Ultimate</code> on the switch once it says to \"Launch your game\"</li> <li>Let it auto-attach and set $main automatically</li> <li>Set up any breakpoints, no_ops, stubs, etc...</li> <li>Type <code>c</code> and hit enter</li> </ol>"},{"location":"Reverse%20Engineering/GDB/#gdb-functions","title":"GDB Functions","text":"<p>The .gdbinit file we set up earlier has these handful of functions that will be pretty useful in your reversing endeavors!</p> <ul> <li><code>my_bt</code> -&gt; Prints the backtrace as absolute addresses. Often misses the first address on the backtrace but you can just p/x $lr for that.</li> <li><code>my_bt2</code> -&gt; Prints the backtrace with offsets relative to the base of main.</li> <li><code>no_op &lt;offset&gt;</code> -&gt; Takes an offset into main and NOPs the instruction at that address</li> <li><code>stub &lt;offset&gt;</code> -&gt; Takes an offset into main and stubs the function at that address</li> <li><code>replace &lt;offset&gt; &lt;new_instruction&gt;</code> -&gt; Replaces the instruction at an offset with the new instruction</li> <li><code>get_pc</code> -&gt; Gets the PC as an offset relative to the base of main</li> <li><code>break_at &lt;offset&gt;</code> -&gt; Sets a breakpoint at an offset relative to the base of main</li> <li><code>localize &lt;register/address&gt;</code> -&gt; Converts the value in the register (or the passed address) to an offset relative to the base of main</li> <li><code>xxd &lt;address&gt; &lt;size&gt;</code> -&gt; Print a xxd dump of the address</li> <li><code>print_trace</code> -&gt; Runs <code>get_pc</code>, <code>localize $lr</code>, &amp; <code>my_bt2</code> to get the current offset, the calling offset, and the backtrace in one command instead of three</li> </ul>"},{"location":"Reverse%20Engineering/Ghidra/","title":"Ghidra Setup","text":""},{"location":"Reverse%20Engineering/Ghidra/#ghidra-setup","title":"Ghidra Setup","text":""},{"location":"Reverse%20Engineering/Ghidra/#requirements","title":"Requirements","text":"<ul> <li>JDK 17 64-bit</li> <li>Ghidra 10.2.2</li> </ul>"},{"location":"Reverse%20Engineering/Ghidra/#setting-up-ghidra","title":"Setting up Ghidra","text":"<ol> <li>Download and install <code>JDK 17</code></li> <li>Download and extract the <code>Ghidra 10.2.2</code> zip</li> <li>Go inside the <code>ghidra_10.2.2_PUBLIC</code> folder and double click <code>ghidraRun.bat</code></li> </ol>"},{"location":"Reverse%20Engineering/Ghidra/#connecting-to-the-shared-smash-ultimate-research-server","title":"Connecting to the shared Smash Ultimate Research Server","text":"<ol> <li>Click <code>File -&gt; New Project</code></li> <li>Select <code>Shared Project</code></li> <li>Type <code>ghidra.arcropolis.com</code> in the <code>Server Name</code> field</li> <li>Set the port field to be <code>37500</code></li> <li>Check the <code>Request Anonymous Access</code> and hit <code>OK</code></li> <li>Click <code>OK</code> on the <code>Anonymous Server Login</code> pop-up</li> <li>Select the <code>SmushLoaderino</code> repository and click <code>Next &gt;&gt;</code></li> <li>Click <code>Finish</code> and wait</li> <li>Double click <code>main_1301 (Ghidra 10.2.2)</code> and the decompiled code will show up after loading</li> </ol>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/","title":"Disabling Auto-Play on Playlist Music Selection","text":""},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#disabling-auto-play-on-playlist-music-selection","title":"Disabling Auto-Play on Playlist Music Selection","text":"<p>This walkthrough will explain the process of using the shared Smash Ultimate Research Server to disable and prevent the music from being played after selecting a track in the normal playlist menu.</p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#things-well-cover","title":"Things we'll cover","text":"<ul> <li>Using Ghidra and the shared Smash Ultimate Research Server to find useful functions</li> <li>Using GDB to break at said functions and view backtraces</li> <li>Track down the instruction which calls the function to play the music after selecting it</li> <li><code>nop</code>ing said instruction to prevent the song from playing after selecting it</li> <li>Creating a skyline plugin with our research to automatically preform the patch for us</li> </ul> <p>Let's get started!</p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#the-start","title":"The start","text":"<p>So first things first, lets go ahead and open up the main decompiled code in Ghidra from the shared Smash Ultimate Research Server. </p> <p>Let's go ahead and search in the symbol tree for anything that might be related to music and see if we get any hits. I'll use <code>bgm</code> since that's something commonly associated with music. </p> <p>Hooo boy! That's a lotta stuff! Luckily for us though, we can ignore everything in the <code>Exports</code> since those are only accessed by the lua files. We have some functions with the label <code>FUN_</code>, so we'll ignore all of those until we're desperate. There are some functions inside namespaces, which from my expierence don't matter much. There are also a couple of labels, but those are for the game's reference. So now we're left with the following functions:</p> <ul> <li><code>bgm_related</code></li> <li><code>get_bgm_save_no</code></li> <li><code>get_ui_bgm_entry_idx_by_id</code></li> <li><code>play_bgm_by_prc_entry_index</code></li> </ul> <p><code>bgm_related</code> and <code>get_bgm_save_no</code> are out of it for me, since the first one is still not exactly known while the other is clearly known for something unrelated to our mission. So now we only have two.</p> <p>I'll personally decide to go with <code>play_bgm_by_prc_entry_index</code>, since that function sounds like it's in charge of playing the bgms.</p> <p>Now that we decided on the function, we'll need to get it's offset. To do so, we'll click on the function in the <code>Symbol Tree</code> and look at the first offset after the function declaration.  As we can see here, the offset is <code>71033135f0</code>. However, we need to remove the <code>710</code> prefix and put a <code>0x</code> prefix instead because <code>710</code> is the base address in Ghidra. So the offset we'll use in Rust and GDB will be <code>0x33135f0</code></p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#breaking","title":"Breaking","text":"<p>We have our offset, so now we can start having the real fun \ud83d\ude08! We'll go ahead and start GDB in Debian and <code>Super Smash Bros. Ultimate</code> on the switch. Once GDB attaches and finds main, we can run <code>break_at 0x33135f0</code> to set a breakpoint at the function we found. That means everytime that function runs, the game will pause and we can see what's going on in memory. </p> <p>Let's go ahead and enter <code>c</code>, then get to the Stage Selection Screen and open up a playlist. When we trying playing a song with the <code>Y</code> button, the game freezes! Don't worry though, your game didn't crash. GDB stopped the game and now you can run commands in GDB. </p> <p>We can enter our commands into GDB, we'll run the <code>print_trace</code> command to get the current $pc (pc being the current offset we're at in the code), the $lr (lr being the instruction that we'll jump back to after our function is over), and the backtrace (a list keeping track of which offset to jump back to). </p> <p>Keeping a note of this output in case we need to compare it to another scenario will be extremely helpful the more deeper you dive into reversing.</p> <p>We'll continue (type <code>c</code> and hit enter) and try to select a song by choosing it this time. When we press <code>A</code> to choose the game, the game freezes again! Just like before, the function got called, so let's go ahead and run the <code>print_trace</code> command again. </p> <p>Oho? What's this? The second offset in the chosen song playback is different than the second offset in the manually chosen playback. This means that if we modify anything in the first offset, then it'll affect both, manually playing the song and the game automatically playing the song. That's pretty interesting. Let's go ahead and jump to the second offset in the chosen song playback in Ghidra since that's what we want to prevent.</p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#tracking","title":"Tracking","text":"<p>We can press <code>g</code> in Ghidra to jump to an offset. Although when we jump to an offset, we need to add <code>710</code> before the offset, since Ghidra starts at <code>710</code> (so in our case, we'll be jumping to <code>7101b352ac</code> in Ghidra)  (Please ignore the horrible hard to read text on the right, that's just a side-effect with the Dark Mode Ghidra theme lol)</p> <p>If we look closely, we can see that we landed at the instruction right after a <code>bl</code> (branch link), which is how aarch64 calls functions. If we double click the function, we can see that it calls <code>play_bgm_by_prc_entry_index</code> in it </p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#noping","title":"Noping","text":"<p>So now that we know that function calls another function that runs the <code>play_bgm_by_prc_entry_index</code>, lets change the <code>bl</code> instruction to a <code>nop</code>. Since I didn't explain it earlier, a <code>nop</code> is a instruction that does absolutely nothing, and that's what makes it special. So let's say that we don't want the <code>bl</code> instruction to jump to a different function. All we need to do is replace the <code>bl</code> instruction with a <code>nop</code> instruction and mission accomplished! To replace the instruction with a nop, we just need to copy the offset of the <code>bl</code> instruction (<code>7101b352a8</code> -&gt; <code>0x1b352a8</code>) and use the <code>no_op</code> function we have in GDB. (If you accidentally continued, then you can freeze the game at any moment by pressing <code>Ctrl + C</code>) </p> <p>Now whenever the game hits the code to jump to the other function, instead it'll see a <code>nop</code>, then it'll think it has to do nothing and keep going, which means the function to play the music will be skipped. Let's continue the game and see what happens when we try playing a song. </p> <p>Success! Congratulations! You have successfully reversed and patched the game to not auto-play the music on selection in the playlist menu!</p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#converting-into-a-skyline-plugin","title":"Converting into a Skyline Plugin","text":"<p>We have our newfound knowledge on how to prevent the game from automatically playing the music when we pick a song, but now we have to manually no_op the function every time we want the game to not play the song. If we want to distribute this as a mod so that users can enjoy it, we can't expect them to have GDB and be willing to put up with manually noping the instruction themselves every time. That's where skyline plugins come in! We'll create a sklyine plugin that patches the offset with a <code>nop</code> instruction every time the game boots!</p> <p>So first, we'll run the <code>cargo skyline new &lt;project_name&gt;</code> command to make a new skyline project. Then open up that folder with your favorite IDE (I'll be using VSCode).</p> <p>Go to <code>src/lib.rs</code> and remove the <code>println!(...)</code> line from the main function. Now make a new line in <code>main()</code> and write the following: <code>skyline::patching::Patch::in_text(0x1b352a8).nop().expect(\"Failed to patch 0x1b352a8\")</code> This line basically says \"Hey, go to the .text section (where the code is stored), then jump to the offset given (<code>0x1b352a8</code>, which is what we noped), then nop. If you fail to nop it, then throw an error message!\". Now we can run <code>cargo skyline run</code> and test it out in-game! </p>"},{"location":"Reverse%20Engineering/Walkthroughs/Disabling%20Auto-Play%20on%20Playlist%20Music%20Selection/#conclusion","title":"Conclusion","text":"<p>I'd say we cleared all of our goals in this walkthrough! We used the Shared Research Server to track down a promising function, used GDB to break and inspect the stack trace, tracked down the instruction which jumped to the function that called the <code>play_bgm</code> function, noped said instruction, and converted it to a skyline plugin.</p>"},{"location":"Skyline/","title":"Index","text":"<p>gsfa</p>"},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/","title":"Setting up the Skyline Development Environment","text":""},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/#setting-up-the-skyline-development-environment","title":"Setting up the Skyline Development Environment","text":""},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/#requirements","title":"Requirements","text":"<ul> <li>rustup (Windows/MacOS/Linux)</li> <li>git (Windows/MacOS/Linux)</li> <li>cargo-skyline</li> </ul>"},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/#installation","title":"Installation","text":"<ol> <li>Install git (Follow the on-screen installer)</li> <li>Install rustup (Follow the instructions on the page)</li> <li>After the installation is complete, open up the command prompt</li> <li>Run the following command: <code>cargo install cargo-skyline</code> and wait for it to install</li> <li>Next up, run <code>cargo skyline set-ip &lt;Switch IP&gt;</code></li> <li>Once that's done, run this command: <code>cargo skyline update-std</code> and click <code>Y</code> (this installation process will take a while)</li> <li>When it's finally over, you have your development environment set up!</li> </ol>"},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/#creating-and-building-a-new-skyline-project","title":"Creating and building a new skyline project","text":"<ol> <li>Run <code>cargo skyline new &lt;project_name&gt;</code></li> <li>Run <code>cd &lt;project_name&gt;</code></li> <li>Run <code>cargo skyline build --release</code></li> <li>Your built plugin file will be in <code>./&lt;project_name&gt;/target/aarch64-skyline-switch/release/lib&lt;project_name&gt;.nro</code></li> <li>Now that the main part is done, open up command prompt in a directory of your choice (I recommend making a new one for your projects)     </li> </ol>"},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/#installing-your-skyline-plugin-automatically","title":"Installing your skyline plugin automatically","text":"<ol> <li>Make sure you have sys-ftpd-light set up (<code>Prerequisites -&gt; Modding Setup</code>)</li> <li>Run <code>cargo skyline run</code></li> </ol>"},{"location":"Skyline/Setting%20up%20the%20Skyline%20Development%20Environment/#installing-your-skyline-plugin-manually","title":"Installing your skyline plugin manually","text":"<ol> <li>Copy <code>./&lt;project_name&gt;/target/aarch64-skyline-switch/release/lib&lt;project_name&gt;.nro</code> to <code>sd:/atmosphere/contents/01006A800016E000/romfs/skyline/plugins</code> (Make sure you have the skyline exefs set up!)</li> </ol>"},{"location":"Skyline/What%20is%20Skyline/","title":"What is Skyline","text":""},{"location":"Skyline/What%20is%20Skyline/#what-is-skyline","title":"What is Skyline","text":"<p>Skyline is a environment that allows modders to write and run custom code so that we can make the game preform what we want it to do.</p>"},{"location":"Skyline/What%20is%20Skyline/#still-under-construction","title":"Still under construction","text":""}]}